// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewIValueContainer creates a new instance of IValueContainer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIValueContainer(t interface {
	mock.TestingT
	Cleanup(func())
}) *IValueContainer {
	mock := &IValueContainer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IValueContainer is an autogenerated mock type for the IValueContainer type
type IValueContainer struct {
	mock.Mock
}

type IValueContainer_Expecter struct {
	mock *mock.Mock
}

func (_m *IValueContainer) EXPECT() *IValueContainer_Expecter {
	return &IValueContainer_Expecter{mock: &_m.Mock}
}

// Errors provides a mock function for the type IValueContainer
func (_mock *IValueContainer) Errors() []error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Errors")
	}

	var r0 []error
	if returnFunc, ok := ret.Get(0).(func() []error); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}
	return r0
}

// IValueContainer_Errors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errors'
type IValueContainer_Errors_Call struct {
	*mock.Call
}

// Errors is a helper method to define mock.On call
func (_e *IValueContainer_Expecter) Errors() *IValueContainer_Errors_Call {
	return &IValueContainer_Errors_Call{Call: _e.mock.On("Errors")}
}

func (_c *IValueContainer_Errors_Call) Run(run func()) *IValueContainer_Errors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IValueContainer_Errors_Call) Return(errs []error) *IValueContainer_Errors_Call {
	_c.Call.Return(errs)
	return _c
}

func (_c *IValueContainer_Errors_Call) RunAndReturn(run func() []error) *IValueContainer_Errors_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type IValueContainer
func (_mock *IValueContainer) Get() []any {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []any
	if returnFunc, ok := ret.Get(0).(func() []any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]any)
		}
	}
	return r0
}

// IValueContainer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type IValueContainer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *IValueContainer_Expecter) Get() *IValueContainer_Get_Call {
	return &IValueContainer_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *IValueContainer_Get_Call) Run(run func()) *IValueContainer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IValueContainer_Get_Call) Return(vs []any) *IValueContainer_Get_Call {
	_c.Call.Return(vs)
	return _c
}

func (_c *IValueContainer_Get_Call) RunAndReturn(run func() []any) *IValueContainer_Get_Call {
	_c.Call.Return(run)
	return _c
}
